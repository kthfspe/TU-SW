
TU_CC1200_SEND_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003318  08003318  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003320  08003320  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000d4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007773  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001669  00000000  00000000  000277fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e0  00000000  00000000  00028e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005d9  00000000  00000000  00029648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020879  00000000  00000000  00029c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000096bf  00000000  00000000  0004a49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1723  00000000  00000000  00053b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ea4  00000000  00000000  0011527c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00117120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032f0 	.word	0x080032f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080032f0 	.word	0x080032f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CC1200_250kbps_settings>:
#include "main.h"
void CC1200_250kbps_settings() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	//
	// Rf settings for CC1200
	//
	halRfWriteReg(IOCFG2,0x06);        //GPIO2 IO Pin Configuration
 80004c8:	2106      	movs	r1, #6
 80004ca:	2001      	movs	r0, #1
 80004cc:	f000 fb34 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYNC_CFG1,0xA9);     //Sync Word Detection Configuration Reg. 1
 80004d0:	21a9      	movs	r1, #169	; 0xa9
 80004d2:	2008      	movs	r0, #8
 80004d4:	f000 fb30 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(DEVIATION_M,0x9A);   //Frequency Deviation Configuration
 80004d8:	219a      	movs	r1, #154	; 0x9a
 80004da:	200a      	movs	r0, #10
 80004dc:	f000 fb2c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MODCFG_DEV_E,0x0D);  //Modulation Format and Frequency Deviation Configur..
 80004e0:	210d      	movs	r1, #13
 80004e2:	200b      	movs	r0, #11
 80004e4:	f000 fb28 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PREAMBLE_CFG0,0x8A); //Preamble Detection Configuration Reg. 0
 80004e8:	218a      	movs	r1, #138	; 0x8a
 80004ea:	200e      	movs	r0, #14
 80004ec:	f000 fb24 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IQIC,0x48);          //Digital Image Channel Compensation Configuration
 80004f0:	2148      	movs	r1, #72	; 0x48
 80004f2:	200f      	movs	r0, #15
 80004f4:	f000 fb20 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(CHAN_BW,0x03);       //Channel Filter Configuration
 80004f8:	2103      	movs	r1, #3
 80004fa:	2010      	movs	r0, #16
 80004fc:	f000 fb1c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG1,0x40);       //General Modem Parameter Configuration Reg. 1
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	2011      	movs	r0, #17
 8000504:	f000 fb18 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG0,0x05);       //General Modem Parameter Configuration Reg. 0
 8000508:	2105      	movs	r1, #5
 800050a:	2012      	movs	r0, #18
 800050c:	f000 fb14 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE2,0xB9);  //Symbol Rate Configuration Exponent and Mantissa [1..
 8000510:	21b9      	movs	r1, #185	; 0xb9
 8000512:	2013      	movs	r0, #19
 8000514:	f000 fb10 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE1,0x99);  //Symbol Rate Configuration Mantissa [15:8]
 8000518:	2199      	movs	r1, #153	; 0x99
 800051a:	2014      	movs	r0, #20
 800051c:	f000 fb0c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE0,0x9A);  //Symbol Rate Configuration Mantissa [7:0]
 8000520:	219a      	movs	r1, #154	; 0x9a
 8000522:	2015      	movs	r0, #21
 8000524:	f000 fb08 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_REF,0x2E);       //AGC Reference Level Configuration
 8000528:	212e      	movs	r1, #46	; 0x2e
 800052a:	2016      	movs	r0, #22
 800052c:	f000 fb04 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CS_THR,0xEE);    //Carrier Sense Threshold Configuration
 8000530:	21ee      	movs	r1, #238	; 0xee
 8000532:	2017      	movs	r0, #23
 8000534:	f000 fb00 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CFG1,0x11);      //Automatic Gain Control Configuration Reg. 1
 8000538:	2111      	movs	r1, #17
 800053a:	201b      	movs	r0, #27
 800053c:	f000 fafc 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CFG0,0x94);      //Automatic Gain Control Configuration Reg. 0
 8000540:	2194      	movs	r1, #148	; 0x94
 8000542:	201c      	movs	r0, #28
 8000544:	f000 faf8 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FIFO_CFG,0x00);      //FIFO Configuration
 8000548:	2100      	movs	r1, #0
 800054a:	201d      	movs	r0, #29
 800054c:	f000 faf4 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CFG,0x12);        //Frequency Synthesizer Configuration
 8000550:	2112      	movs	r1, #18
 8000552:	2020      	movs	r0, #32
 8000554:	f000 faf0 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG2,0x00);      //Packet Configuration Reg. 2
 8000558:	2100      	movs	r1, #0
 800055a:	2026      	movs	r0, #38	; 0x26
 800055c:	f000 faec 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG1,0x43);      //Packet Configuration Reg. 1
 8000560:	2143      	movs	r1, #67	; 0x43
 8000562:	2027      	movs	r0, #39	; 0x27
 8000564:	f000 fae8 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG0,0x20);      //Packet Configuration Reg. 0
 8000568:	2120      	movs	r1, #32
 800056a:	2028      	movs	r0, #40	; 0x28
 800056c:	f000 fae4 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PA_CFG1,0x6A);       //Power Amplifier Configuration Reg. 1
 8000570:	216a      	movs	r1, #106	; 0x6a
 8000572:	202b      	movs	r0, #43	; 0x2b
 8000574:	f000 fae0 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PA_CFG0,0x51);       //Power Amplifier Configuration Reg. 0
 8000578:	2151      	movs	r1, #81	; 0x51
 800057a:	202c      	movs	r0, #44	; 0x2c
 800057c:	f000 fadc 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_LEN,0xFF);       //Packet Length Configuration
 8000580:	21ff      	movs	r1, #255	; 0xff
 8000582:	202e      	movs	r0, #46	; 0x2e
 8000584:	f000 fad8 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_MIX_CFG,0x1C);    //IF Mix Configuration
 8000588:	211c      	movs	r1, #28
 800058a:	f44f 503c 	mov.w	r0, #12032	; 0x2f00
 800058e:	f000 fad3 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQOFF_CFG,0x22);   //Frequency Offset Correction Configuration
 8000592:	2122      	movs	r1, #34	; 0x22
 8000594:	f642 7001 	movw	r0, #12033	; 0x2f01
 8000598:	f000 face 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(TOC_CFG,0x03);       //Timing Offset Correction Configuration
 800059c:	2103      	movs	r1, #3
 800059e:	f642 7002 	movw	r0, #12034	; 0x2f02
 80005a2:	f000 fac9 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG2,0x02);       //General Modem Parameter Configuration Reg. 2
 80005a6:	2102      	movs	r1, #2
 80005a8:	f642 7005 	movw	r0, #12037	; 0x2f05
 80005ac:	f000 fac4 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ2,0x57);         //Frequency Configuration [23:16]
 80005b0:	2157      	movs	r1, #87	; 0x57
 80005b2:	f642 700c 	movw	r0, #12044	; 0x2f0c
 80005b6:	f000 fabf 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ1,0x0F);         //Frequency Configuration [15:8]
 80005ba:	210f      	movs	r1, #15
 80005bc:	f642 700d 	movw	r0, #12045	; 0x2f0d
 80005c0:	f000 faba 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ0,0x5C);         //Frequency Configuration [7:0]
 80005c4:	215c      	movs	r1, #92	; 0x5c
 80005c6:	f642 700e 	movw	r0, #12046	; 0x2f0e
 80005ca:	f000 fab5 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_ADC1,0xEE);       //Analog to Digital Converter Configuration Reg. 1
 80005ce:	21ee      	movs	r1, #238	; 0xee
 80005d0:	f642 7010 	movw	r0, #12048	; 0x2f10
 80005d4:	f000 fab0 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_ADC0,0x10);       //Analog to Digital Converter Configuration Reg. 0
 80005d8:	2110      	movs	r1, #16
 80005da:	f642 7011 	movw	r0, #12049	; 0x2f11
 80005de:	f000 faab 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIG1,0x04);       //Frequency Synthesizer Digital Reg. 1
 80005e2:	2104      	movs	r1, #4
 80005e4:	f642 7012 	movw	r0, #12050	; 0x2f12
 80005e8:	f000 faa6 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIG0,0x50);       //Frequency Synthesizer Digital Reg. 0
 80005ec:	2150      	movs	r1, #80	; 0x50
 80005ee:	f642 7013 	movw	r0, #12051	; 0x2f13
 80005f2:	f000 faa1 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CAL1,0x40);       //Frequency Synthesizer Calibration Reg. 1
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	f642 7016 	movw	r0, #12054	; 0x2f16
 80005fc:	f000 fa9c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CAL0,0x0E);       //Frequency Synthesizer Calibration Reg. 0
 8000600:	210e      	movs	r1, #14
 8000602:	f642 7017 	movw	r0, #12055	; 0x2f17
 8000606:	f000 fa97 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIVTWO,0x03);     //Frequency Synthesizer Divide by 2
 800060a:	2103      	movs	r1, #3
 800060c:	f642 7019 	movw	r0, #12057	; 0x2f19
 8000610:	f000 fa92 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DSM0,0x33);       //FS Digital Synthesizer Module Configuration Reg. 0
 8000614:	2133      	movs	r1, #51	; 0x33
 8000616:	f642 701b 	movw	r0, #12059	; 0x2f1b
 800061a:	f000 fa8d 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DVC1,0xF7);       //Frequency Synthesizer Divider Chain Configuration ..
 800061e:	21f7      	movs	r1, #247	; 0xf7
 8000620:	f642 701c 	movw	r0, #12060	; 0x2f1c
 8000624:	f000 fa88 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DVC0,0x0F);       //Frequency Synthesizer Divider Chain Configuration ..
 8000628:	210f      	movs	r1, #15
 800062a:	f642 701d 	movw	r0, #12061	; 0x2f1d
 800062e:	f000 fa83 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_PFD,0x00);        //Frequency Synthesizer Phase Frequency Detector Con..
 8000632:	2100      	movs	r1, #0
 8000634:	f642 701f 	movw	r0, #12063	; 0x2f1f
 8000638:	f000 fa7e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_PRE,0x6E);        //Frequency Synthesizer Prescaler Configuration
 800063c:	216e      	movs	r1, #110	; 0x6e
 800063e:	f642 7020 	movw	r0, #12064	; 0x2f20
 8000642:	f000 fa79 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_REG_DIV_CML,0x1C);//Frequency Synthesizer Divider Regulator Configurat..
 8000646:	211c      	movs	r1, #28
 8000648:	f642 7021 	movw	r0, #12065	; 0x2f21
 800064c:	f000 fa74 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_SPARE,0xAC);      //Frequency Synthesizer Spare
 8000650:	21ac      	movs	r1, #172	; 0xac
 8000652:	f642 7022 	movw	r0, #12066	; 0x2f22
 8000656:	f000 fa6f 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_VCO0,0xB5);       //FS Voltage Controlled Oscillator Configuration Reg..
 800065a:	21b5      	movs	r1, #181	; 0xb5
 800065c:	f642 7027 	movw	r0, #12071	; 0x2f27
 8000660:	f000 fa6a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IFAMP,0x09);         //Intermediate Frequency Amplifier Configuration
 8000664:	2109      	movs	r1, #9
 8000666:	f642 702f 	movw	r0, #12079	; 0x2f2f
 800066a:	f000 fa65 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(XOSC5,0x0E);         //Crystal Oscillator Configuration Reg. 5
 800066e:	210e      	movs	r1, #14
 8000670:	f642 7032 	movw	r0, #12082	; 0x2f32
 8000674:	f000 fa60 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(XOSC1,0x03);         //Crystal Oscillator Configuration Reg. 1
 8000678:	2103      	movs	r1, #3
 800067a:	f642 7036 	movw	r0, #12086	; 0x2f36
 800067e:	f000 fa5b 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PARTNUMBER,0x20);    //Part Number
 8000682:	2120      	movs	r1, #32
 8000684:	f642 708f 	movw	r0, #12175	; 0x2f8f
 8000688:	f000 fa56 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PARTVERSION,0x11);   //Part Revision
 800068c:	2111      	movs	r1, #17
 800068e:	f642 7090 	movw	r0, #12176	; 0x2f90
 8000692:	f000 fa51 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MODEM_STATUS1,0x10); //Modem Status Reg. 1
 8000696:	2110      	movs	r1, #16
 8000698:	f642 7092 	movw	r0, #12178	; 0x2f92
 800069c:	f000 fa4c 	bl	8000b38 <halRfWriteReg>

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <CC1200_500kbps_settings>:
#include "main.h"
void CC1200_500kbps_settings() {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	//
	// Rf settings for CC1200
	//
	halRfWriteReg(IOCFG2,0x06);        //GPIO2 IO Pin Configuration
 80006a8:	2106      	movs	r1, #6
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 fa44 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYNC_CFG1,0xA8);     //Sync Word Detection Configuration Reg. 1
 80006b0:	21a8      	movs	r1, #168	; 0xa8
 80006b2:	2008      	movs	r0, #8
 80006b4:	f000 fa40 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYNC_CFG0,0x13);     //Sync Word Detection Configuration Reg. 0
 80006b8:	2113      	movs	r1, #19
 80006ba:	2009      	movs	r0, #9
 80006bc:	f000 fa3c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(DEVIATION_M,0x99);   //Frequency Deviation Configuration
 80006c0:	2199      	movs	r1, #153	; 0x99
 80006c2:	200a      	movs	r0, #10
 80006c4:	f000 fa38 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MODCFG_DEV_E,0x0D);  //Modulation Format and Frequency Deviation Configur..
 80006c8:	210d      	movs	r1, #13
 80006ca:	200b      	movs	r0, #11
 80006cc:	f000 fa34 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(DCFILT_CFG,0x26);    //Digital DC Removal Configuration
 80006d0:	2126      	movs	r1, #38	; 0x26
 80006d2:	200c      	movs	r0, #12
 80006d4:	f000 fa30 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PREAMBLE_CFG0,0x8A); //Preamble Detection Configuration Reg. 0
 80006d8:	218a      	movs	r1, #138	; 0x8a
 80006da:	200e      	movs	r0, #14
 80006dc:	f000 fa2c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IQIC,0x00);          //Digital Image Channel Compensation Configuration
 80006e0:	2100      	movs	r1, #0
 80006e2:	200f      	movs	r0, #15
 80006e4:	f000 fa28 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(CHAN_BW,0x02);       //Channel Filter Configuration
 80006e8:	2102      	movs	r1, #2
 80006ea:	2010      	movs	r0, #16
 80006ec:	f000 fa24 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG1,0x40);       //General Modem Parameter Configuration Reg. 1
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	2011      	movs	r0, #17
 80006f4:	f000 fa20 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG0,0x05);       //General Modem Parameter Configuration Reg. 0
 80006f8:	2105      	movs	r1, #5
 80006fa:	2012      	movs	r0, #18
 80006fc:	f000 fa1c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE2,0xC9);  //Symbol Rate Configuration Exponent and Mantissa [1..
 8000700:	21c9      	movs	r1, #201	; 0xc9
 8000702:	2013      	movs	r0, #19
 8000704:	f000 fa18 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE1,0x99);  //Symbol Rate Configuration Mantissa [15:8]
 8000708:	2199      	movs	r1, #153	; 0x99
 800070a:	2014      	movs	r0, #20
 800070c:	f000 fa14 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE0,0x99);  //Symbol Rate Configuration Mantissa [7:0]
 8000710:	2199      	movs	r1, #153	; 0x99
 8000712:	2015      	movs	r0, #21
 8000714:	f000 fa10 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_REF,0x2F);       //AGC Reference Level Configuration
 8000718:	212f      	movs	r1, #47	; 0x2f
 800071a:	2016      	movs	r0, #22
 800071c:	f000 fa0c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CS_THR,0xEC);    //Carrier Sense Threshold Configuration
 8000720:	21ec      	movs	r1, #236	; 0xec
 8000722:	2017      	movs	r0, #23
 8000724:	f000 fa08 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CFG1,0x16);      //Automatic Gain Control Configuration Reg. 1
 8000728:	2116      	movs	r1, #22
 800072a:	201b      	movs	r0, #27
 800072c:	f000 fa04 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CFG0,0x84);      //Automatic Gain Control Configuration Reg. 0
 8000730:	2184      	movs	r1, #132	; 0x84
 8000732:	201c      	movs	r0, #28
 8000734:	f000 fa00 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FIFO_CFG,0x00);      //FIFO Configuration
 8000738:	2100      	movs	r1, #0
 800073a:	201d      	movs	r0, #29
 800073c:	f000 f9fc 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CFG,0x12);        //Frequency Synthesizer Configuration
 8000740:	2112      	movs	r1, #18
 8000742:	2020      	movs	r0, #32
 8000744:	f000 f9f8 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG2,0x00);      //Packet Configuration Reg. 2
 8000748:	2100      	movs	r1, #0
 800074a:	2026      	movs	r0, #38	; 0x26
 800074c:	f000 f9f4 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG1,0x43);      //Packet Configuration Reg. 1
 8000750:	2143      	movs	r1, #67	; 0x43
 8000752:	2027      	movs	r0, #39	; 0x27
 8000754:	f000 f9f0 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG0,0x20);      //Packet Configuration Reg. 0
 8000758:	2120      	movs	r1, #32
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f000 f9ec 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PA_CFG1,0x6A);       //Power Amplifier Configuration Reg. 1
 8000760:	216a      	movs	r1, #106	; 0x6a
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f000 f9e8 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(ASK_CFG,0x3F);       //ASK Configuration
 8000768:	213f      	movs	r1, #63	; 0x3f
 800076a:	202d      	movs	r0, #45	; 0x2d
 800076c:	f000 f9e4 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_LEN,0xFF);       //Packet Length Configuration
 8000770:	21ff      	movs	r1, #255	; 0xff
 8000772:	202e      	movs	r0, #46	; 0x2e
 8000774:	f000 f9e0 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_MIX_CFG,0x18);    //IF Mix Configuration
 8000778:	2118      	movs	r1, #24
 800077a:	f44f 503c 	mov.w	r0, #12032	; 0x2f00
 800077e:	f000 f9db 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQOFF_CFG,0x22);   //Frequency Offset Correction Configuration
 8000782:	2122      	movs	r1, #34	; 0x22
 8000784:	f642 7001 	movw	r0, #12033	; 0x2f01
 8000788:	f000 f9d6 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(TOC_CFG,0x03);       //Timing Offset Correction Configuration
 800078c:	2103      	movs	r1, #3
 800078e:	f642 7002 	movw	r0, #12034	; 0x2f02
 8000792:	f000 f9d1 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG2,0x00);       //General Modem Parameter Configuration Reg. 2
 8000796:	2100      	movs	r1, #0
 8000798:	f642 7005 	movw	r0, #12037	; 0x2f05
 800079c:	f000 f9cc 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ2,0x57);         //Frequency Configuration [23:16]
 80007a0:	2157      	movs	r1, #87	; 0x57
 80007a2:	f642 700c 	movw	r0, #12044	; 0x2f0c
 80007a6:	f000 f9c7 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ1,0x0F);         //Frequency Configuration [15:8]
 80007aa:	210f      	movs	r1, #15
 80007ac:	f642 700d 	movw	r0, #12045	; 0x2f0d
 80007b0:	f000 f9c2 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ0,0x5C);         //Frequency Configuration [7:0]
 80007b4:	215c      	movs	r1, #92	; 0x5c
 80007b6:	f642 700e 	movw	r0, #12046	; 0x2f0e
 80007ba:	f000 f9bd 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_ADC1,0xEE);       //Analog to Digital Converter Configuration Reg. 1
 80007be:	21ee      	movs	r1, #238	; 0xee
 80007c0:	f642 7010 	movw	r0, #12048	; 0x2f10
 80007c4:	f000 f9b8 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_ADC0,0x10);       //Analog to Digital Converter Configuration Reg. 0
 80007c8:	2110      	movs	r1, #16
 80007ca:	f642 7011 	movw	r0, #12049	; 0x2f11
 80007ce:	f000 f9b3 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIG1,0x04);       //Frequency Synthesizer Digital Reg. 1
 80007d2:	2104      	movs	r1, #4
 80007d4:	f642 7012 	movw	r0, #12050	; 0x2f12
 80007d8:	f000 f9ae 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIG0,0x50);       //Frequency Synthesizer Digital Reg. 0
 80007dc:	2150      	movs	r1, #80	; 0x50
 80007de:	f642 7013 	movw	r0, #12051	; 0x2f13
 80007e2:	f000 f9a9 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CAL1,0x40);       //Frequency Synthesizer Calibration Reg. 1
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	f642 7016 	movw	r0, #12054	; 0x2f16
 80007ec:	f000 f9a4 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CAL0,0x0E);       //Frequency Synthesizer Calibration Reg. 0
 80007f0:	210e      	movs	r1, #14
 80007f2:	f642 7017 	movw	r0, #12055	; 0x2f17
 80007f6:	f000 f99f 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIVTWO,0x03);     //Frequency Synthesizer Divide by 2
 80007fa:	2103      	movs	r1, #3
 80007fc:	f642 7019 	movw	r0, #12057	; 0x2f19
 8000800:	f000 f99a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DSM0,0x33);       //FS Digital Synthesizer Module Configuration Reg. 0
 8000804:	2133      	movs	r1, #51	; 0x33
 8000806:	f642 701b 	movw	r0, #12059	; 0x2f1b
 800080a:	f000 f995 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DVC1,0xF7);       //Frequency Synthesizer Divider Chain Configuration ..
 800080e:	21f7      	movs	r1, #247	; 0xf7
 8000810:	f642 701c 	movw	r0, #12060	; 0x2f1c
 8000814:	f000 f990 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DVC0,0x0F);       //Frequency Synthesizer Divider Chain Configuration ..
 8000818:	210f      	movs	r1, #15
 800081a:	f642 701d 	movw	r0, #12061	; 0x2f1d
 800081e:	f000 f98b 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_PFD,0x00);        //Frequency Synthesizer Phase Frequency Detector Con..
 8000822:	2100      	movs	r1, #0
 8000824:	f642 701f 	movw	r0, #12063	; 0x2f1f
 8000828:	f000 f986 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_PRE,0x6E);        //Frequency Synthesizer Prescaler Configuration
 800082c:	216e      	movs	r1, #110	; 0x6e
 800082e:	f642 7020 	movw	r0, #12064	; 0x2f20
 8000832:	f000 f981 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_REG_DIV_CML,0x1C);//Frequency Synthesizer Divider Regulator Configurat..
 8000836:	211c      	movs	r1, #28
 8000838:	f642 7021 	movw	r0, #12065	; 0x2f21
 800083c:	f000 f97c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_SPARE,0xAC);      //Frequency Synthesizer Spare
 8000840:	21ac      	movs	r1, #172	; 0xac
 8000842:	f642 7022 	movw	r0, #12066	; 0x2f22
 8000846:	f000 f977 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_VCO0,0xB5);       //FS Voltage Controlled Oscillator Configuration Reg..
 800084a:	21b5      	movs	r1, #181	; 0xb5
 800084c:	f642 7027 	movw	r0, #12071	; 0x2f27
 8000850:	f000 f972 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IFAMP,0x0D);         //Intermediate Frequency Amplifier Configuration
 8000854:	210d      	movs	r1, #13
 8000856:	f642 702f 	movw	r0, #12079	; 0x2f2f
 800085a:	f000 f96d 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(XOSC5,0x0E);         //Crystal Oscillator Configuration Reg. 5
 800085e:	210e      	movs	r1, #14
 8000860:	f642 7032 	movw	r0, #12082	; 0x2f32
 8000864:	f000 f968 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(XOSC1,0x03);         //Crystal Oscillator Configuration Reg. 1
 8000868:	2103      	movs	r1, #3
 800086a:	f642 7036 	movw	r0, #12086	; 0x2f36
 800086e:	f000 f963 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PARTNUMBER,0x20);    //Part Number
 8000872:	2120      	movs	r1, #32
 8000874:	f642 708f 	movw	r0, #12175	; 0x2f8f
 8000878:	f000 f95e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PARTVERSION,0x11);   //Part Revision
 800087c:	2111      	movs	r1, #17
 800087e:	f642 7090 	movw	r0, #12176	; 0x2f90
 8000882:	f000 f959 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MODEM_STATUS1,0x10); //Modem Status Reg. 1
 8000886:	2110      	movs	r1, #16
 8000888:	f642 7092 	movw	r0, #12178	; 0x2f92
 800088c:	f000 f954 	bl	8000b38 <halRfWriteReg>

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <CC1200_50kbps_settings>:
#include "main.h"
void CC1200_50kbps_settings() {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	  // Rf settings for CC1200
	  //
	  halRfWriteReg(IOCFG2,0x06);        //GPIO2 IO Pin Configuration
 8000898:	2106      	movs	r1, #6
 800089a:	2001      	movs	r0, #1
 800089c:	f000 f94c 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(SYNC_CFG1,0xA9);     //Sync Word Detection Configuration Reg. 1
 80008a0:	21a9      	movs	r1, #169	; 0xa9
 80008a2:	2008      	movs	r0, #8
 80008a4:	f000 f948 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MODCFG_DEV_E,0x0B);  //Modulation Format and Frequency Deviation Configur..
 80008a8:	210b      	movs	r1, #11
 80008aa:	200b      	movs	r0, #11
 80008ac:	f000 f944 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PREAMBLE_CFG0,0x8A); //Preamble Detection Configuration Reg. 0
 80008b0:	218a      	movs	r1, #138	; 0x8a
 80008b2:	200e      	movs	r0, #14
 80008b4:	f000 f940 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IQIC,0xC8);          //Digital Image Channel Compensation Configuration
 80008b8:	21c8      	movs	r1, #200	; 0xc8
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f93c 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(CHAN_BW,0x10);       //Channel Filter Configuration
 80008c0:	2110      	movs	r1, #16
 80008c2:	2010      	movs	r0, #16
 80008c4:	f000 f938 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MDMCFG1,0x42);       //General Modem Parameter Configuration Reg. 1
 80008c8:	2142      	movs	r1, #66	; 0x42
 80008ca:	2011      	movs	r0, #17
 80008cc:	f000 f934 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MDMCFG0,0x05);       //General Modem Parameter Configuration Reg. 0
 80008d0:	2105      	movs	r1, #5
 80008d2:	2012      	movs	r0, #18
 80008d4:	f000 f930 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(SYMBOL_RATE2,0x94);  //Symbol Rate Configuration Exponent and Mantissa [1..
 80008d8:	2194      	movs	r1, #148	; 0x94
 80008da:	2013      	movs	r0, #19
 80008dc:	f000 f92c 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(SYMBOL_RATE1,0x7A);  //Symbol Rate Configuration Mantissa [15:8]
 80008e0:	217a      	movs	r1, #122	; 0x7a
 80008e2:	2014      	movs	r0, #20
 80008e4:	f000 f928 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(SYMBOL_RATE0,0xE1);  //Symbol Rate Configuration Mantissa [7:0]
 80008e8:	21e1      	movs	r1, #225	; 0xe1
 80008ea:	2015      	movs	r0, #21
 80008ec:	f000 f924 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(AGC_REF,0x27);       //AGC Reference Level Configuration
 80008f0:	2127      	movs	r1, #39	; 0x27
 80008f2:	2016      	movs	r0, #22
 80008f4:	f000 f920 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(AGC_CS_THR,0xEE);    //Carrier Sense Threshold Configuration
 80008f8:	21ee      	movs	r1, #238	; 0xee
 80008fa:	2017      	movs	r0, #23
 80008fc:	f000 f91c 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(AGC_CFG1,0x11);      //Automatic Gain Control Configuration Reg. 1
 8000900:	2111      	movs	r1, #17
 8000902:	201b      	movs	r0, #27
 8000904:	f000 f918 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(AGC_CFG0,0x94);      //Automatic Gain Control Configuration Reg. 0
 8000908:	2194      	movs	r1, #148	; 0x94
 800090a:	201c      	movs	r0, #28
 800090c:	f000 f914 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FIFO_CFG,0x00);      //FIFO Configuration
 8000910:	2100      	movs	r1, #0
 8000912:	201d      	movs	r0, #29
 8000914:	f000 f910 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_CFG,0x12);        //Frequency Synthesizer Configuration
 8000918:	2112      	movs	r1, #18
 800091a:	2020      	movs	r0, #32
 800091c:	f000 f90c 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PKT_CFG2,0x00);      //Packet Configuration Reg. 2
 8000920:	2100      	movs	r1, #0
 8000922:	2026      	movs	r0, #38	; 0x26
 8000924:	f000 f908 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PKT_CFG1,0x43);      //Packet Configuration Reg. 1
 8000928:	2143      	movs	r1, #67	; 0x43
 800092a:	2027      	movs	r0, #39	; 0x27
 800092c:	f000 f904 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PKT_CFG0,0x20);      //Packet Configuration Reg. 0
 8000930:	2120      	movs	r1, #32
 8000932:	2028      	movs	r0, #40	; 0x28
 8000934:	f000 f900 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PA_CFG1,0x6A);       //Power Amplifier Configuration Reg. 1
 8000938:	216a      	movs	r1, #106	; 0x6a
 800093a:	202b      	movs	r0, #43	; 0x2b
 800093c:	f000 f8fc 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PKT_LEN,0xFF);       //Packet Length Configuration
 8000940:	21ff      	movs	r1, #255	; 0xff
 8000942:	202e      	movs	r0, #46	; 0x2e
 8000944:	f000 f8f8 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IF_MIX_CFG,0x1C);    //IF Mix Configuration
 8000948:	211c      	movs	r1, #28
 800094a:	f44f 503c 	mov.w	r0, #12032	; 0x2f00
 800094e:	f000 f8f3 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(TOC_CFG,0x03);       //Timing Offset Correction Configuration
 8000952:	2103      	movs	r1, #3
 8000954:	f642 7002 	movw	r0, #12034	; 0x2f02
 8000958:	f000 f8ee 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MDMCFG2,0x02);       //General Modem Parameter Configuration Reg. 2
 800095c:	2102      	movs	r1, #2
 800095e:	f642 7005 	movw	r0, #12037	; 0x2f05
 8000962:	f000 f8e9 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FREQ2,0x56);         //Frequency Configuration [23:16]
 8000966:	2156      	movs	r1, #86	; 0x56
 8000968:	f642 700c 	movw	r0, #12044	; 0x2f0c
 800096c:	f000 f8e4 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FREQ1,0xCC);         //Frequency Configuration [15:8]
 8000970:	21cc      	movs	r1, #204	; 0xcc
 8000972:	f642 700d 	movw	r0, #12045	; 0x2f0d
 8000976:	f000 f8df 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FREQ0,0xCC);         //Frequency Configuration [7:0]
 800097a:	21cc      	movs	r1, #204	; 0xcc
 800097c:	f642 700e 	movw	r0, #12046	; 0x2f0e
 8000980:	f000 f8da 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IF_ADC1,0xEE);       //Analog to Digital Converter Configuration Reg. 1
 8000984:	21ee      	movs	r1, #238	; 0xee
 8000986:	f642 7010 	movw	r0, #12048	; 0x2f10
 800098a:	f000 f8d5 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IF_ADC0,0x10);       //Analog to Digital Converter Configuration Reg. 0
 800098e:	2110      	movs	r1, #16
 8000990:	f642 7011 	movw	r0, #12049	; 0x2f11
 8000994:	f000 f8d0 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DIG1,0x07);       //Frequency Synthesizer Digital Reg. 1
 8000998:	2107      	movs	r1, #7
 800099a:	f642 7012 	movw	r0, #12050	; 0x2f12
 800099e:	f000 f8cb 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DIG0,0xAF);       //Frequency Synthesizer Digital Reg. 0
 80009a2:	21af      	movs	r1, #175	; 0xaf
 80009a4:	f642 7013 	movw	r0, #12051	; 0x2f13
 80009a8:	f000 f8c6 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_CAL1,0x40);       //Frequency Synthesizer Calibration Reg. 1
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	f642 7016 	movw	r0, #12054	; 0x2f16
 80009b2:	f000 f8c1 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_CAL0,0x0E);       //Frequency Synthesizer Calibration Reg. 0
 80009b6:	210e      	movs	r1, #14
 80009b8:	f642 7017 	movw	r0, #12055	; 0x2f17
 80009bc:	f000 f8bc 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DIVTWO,0x03);     //Frequency Synthesizer Divide by 2
 80009c0:	2103      	movs	r1, #3
 80009c2:	f642 7019 	movw	r0, #12057	; 0x2f19
 80009c6:	f000 f8b7 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DSM0,0x33);       //FS Digital Synthesizer Module Configuration Reg. 0
 80009ca:	2133      	movs	r1, #51	; 0x33
 80009cc:	f642 701b 	movw	r0, #12059	; 0x2f1b
 80009d0:	f000 f8b2 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DVC0,0x17);       //Frequency Synthesizer Divider Chain Configuration ..
 80009d4:	2117      	movs	r1, #23
 80009d6:	f642 701d 	movw	r0, #12061	; 0x2f1d
 80009da:	f000 f8ad 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_PFD,0x00);        //Frequency Synthesizer Phase Frequency Detector Con..
 80009de:	2100      	movs	r1, #0
 80009e0:	f642 701f 	movw	r0, #12063	; 0x2f1f
 80009e4:	f000 f8a8 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_PRE,0x6E);        //Frequency Synthesizer Prescaler Configuration
 80009e8:	216e      	movs	r1, #110	; 0x6e
 80009ea:	f642 7020 	movw	r0, #12064	; 0x2f20
 80009ee:	f000 f8a3 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_REG_DIV_CML,0x1C);//Frequency Synthesizer Divider Regulator Configurat..
 80009f2:	211c      	movs	r1, #28
 80009f4:	f642 7021 	movw	r0, #12065	; 0x2f21
 80009f8:	f000 f89e 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_SPARE,0xAC);      //Frequency Synthesizer Spare
 80009fc:	21ac      	movs	r1, #172	; 0xac
 80009fe:	f642 7022 	movw	r0, #12066	; 0x2f22
 8000a02:	f000 f899 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_VCO0,0xB5);       //FS Voltage Controlled Oscillator Configuration Reg..
 8000a06:	21b5      	movs	r1, #181	; 0xb5
 8000a08:	f642 7027 	movw	r0, #12071	; 0x2f27
 8000a0c:	f000 f894 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IFAMP,0x09);         //Intermediate Frequency Amplifier Configuration
 8000a10:	2109      	movs	r1, #9
 8000a12:	f642 702f 	movw	r0, #12079	; 0x2f2f
 8000a16:	f000 f88f 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(XOSC5,0x0E);         //Crystal Oscillator Configuration Reg. 5
 8000a1a:	210e      	movs	r1, #14
 8000a1c:	f642 7032 	movw	r0, #12082	; 0x2f32
 8000a20:	f000 f88a 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(XOSC1,0x03);         //Crystal Oscillator Configuration Reg. 1
 8000a24:	2103      	movs	r1, #3
 8000a26:	f642 7036 	movw	r0, #12086	; 0x2f36
 8000a2a:	f000 f885 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PARTNUMBER,0x20);    //Part Number
 8000a2e:	2120      	movs	r1, #32
 8000a30:	f642 708f 	movw	r0, #12175	; 0x2f8f
 8000a34:	f000 f880 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PARTVERSION,0x11);   //Part Revision
 8000a38:	2111      	movs	r1, #17
 8000a3a:	f642 7090 	movw	r0, #12176	; 0x2f90
 8000a3e:	f000 f87b 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MODEM_STATUS1,0x10); //Modem Status Reg. 1
 8000a42:	2110      	movs	r1, #16
 8000a44:	f642 7092 	movw	r0, #12178	; 0x2f92
 8000a48:	f000 f876 	bl	8000b38 <halRfWriteReg>

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <CS_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Select CS
void CS_Select()  {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <CS_Select+0x14>)
 8000a5a:	f001 fa1f 	bl	8001e9c <HAL_GPIO_WritePin>


}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <CS_Deselect>:

// Deselect CS
void CS_Deselect()  {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2140      	movs	r1, #64	; 0x40
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <CS_Deselect+0x14>)
 8000a72:	f001 fa13 	bl	8001e9c <HAL_GPIO_WritePin>

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <wait_Miso>:

// Waits until MISO goes low
void wait_Miso() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11)>0){
 8000a84:	e000      	b.n	8000a88 <wait_Miso+0x8>
		__NOP();
 8000a86:	bf00      	nop
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11)>0){
 8000a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <wait_Miso+0x20>)
 8000a8e:	f001 f9ed 	bl	8001e6c <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f6      	bne.n	8000a86 <wait_Miso+0x6>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <writeReg>:

//Write to register
void writeReg(uint16_t regAddr, uint8_t value)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	80fb      	strh	r3, [r7, #6]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	717b      	strb	r3, [r7, #5]
	uint8_t extended_or_not  = (uint8_t)(regAddr>>8);
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	0a1b      	lsrs	r3, r3, #8
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	73fb      	strb	r3, [r7, #15]
	uint8_t extended_addr = (uint8_t)(regAddr & 0x00FF);
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	73bb      	strb	r3, [r7, #14]
	if (extended_or_not == 0){
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d112      	bne.n	8000af0 <writeReg+0x4c>
		CS_Select();                     									   // Select CS
 8000aca:	f7ff ffc1 	bl	8000a50 <CS_Select>
		wait_Miso();                          							  	 // Wait until MISO goes low
 8000ace:	f7ff ffd7 	bl	8000a80 <wait_Miso>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&regAddr, 1, 100);                // Send register address
 8000ad2:	1db9      	adds	r1, r7, #6
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4816      	ldr	r0, [pc, #88]	; (8000b34 <writeReg+0x90>)
 8000ada:	f001 febe 	bl	800285a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&value, 1, 100);                  // Send value
 8000ade:	1d79      	adds	r1, r7, #5
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <writeReg+0x90>)
 8000ae6:	f001 feb8 	bl	800285a <HAL_SPI_Transmit>
		CS_Deselect();                    	   							   // Deselect CC1101
 8000aea:	f7ff ffbd 	bl	8000a68 <CS_Deselect>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_or_not, 1, 100);      // Access the extended registers
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_addr, 1, 100);        // Send register address
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&value, 1, 100);				   // Send value
		CS_Deselect();                    	   							   // Deselect CC1101
	}
}
 8000aee:	e01c      	b.n	8000b2a <writeReg+0x86>
	else if (extended_or_not == 0x2F){
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2b2f      	cmp	r3, #47	; 0x2f
 8000af4:	d119      	bne.n	8000b2a <writeReg+0x86>
		CS_Select();                     								   // Select CS
 8000af6:	f7ff ffab 	bl	8000a50 <CS_Select>
		wait_Miso();                          							   // Wait until MISO goes low
 8000afa:	f7ff ffc1 	bl	8000a80 <wait_Miso>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_or_not, 1, 100);      // Access the extended registers
 8000afe:	f107 010f 	add.w	r1, r7, #15
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2201      	movs	r2, #1
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <writeReg+0x90>)
 8000b08:	f001 fea7 	bl	800285a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_addr, 1, 100);        // Send register address
 8000b0c:	f107 010e 	add.w	r1, r7, #14
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	2201      	movs	r2, #1
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <writeReg+0x90>)
 8000b16:	f001 fea0 	bl	800285a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&value, 1, 100);				   // Send value
 8000b1a:	1d79      	adds	r1, r7, #5
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <writeReg+0x90>)
 8000b22:	f001 fe9a 	bl	800285a <HAL_SPI_Transmit>
		CS_Deselect();                    	   							   // Deselect CC1101
 8000b26:	f7ff ff9f 	bl	8000a68 <CS_Deselect>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000084 	.word	0x20000084

08000b38 <halRfWriteReg>:

// Write to register (ONLY USED FOR SETTING THE INTIAL SETTINGS. The name is "halRfWriteReg" so it matches with SMARTRF Studio
void halRfWriteReg(uint16_t setting, uint8_t value)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	80fb      	strh	r3, [r7, #6]
 8000b44:	4613      	mov	r3, r2
 8000b46:	717b      	strb	r3, [r7, #5]
	writeReg(setting, value);
 8000b48:	797a      	ldrb	r2, [r7, #5]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ffa8 	bl	8000aa4 <writeReg>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <command_strobe1>:

// Send command strobe (FIFO_BYTES_AVAILABLE CASE 1)
void command_strobe1(uint8_t cmd){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
    cmd = cmd | 0x00;                									// | 0x00 means that R/W=0(FIFO_BYTES_AVAILABLE means the TXFIFO when status byte has been sent)/ burst=0(strobe)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	71fb      	strb	r3, [r7, #7]
    CS_Select();            		 									// set the CS pin to LOW
 8000b6a:	f7ff ff71 	bl	8000a50 <CS_Select>
    wait_Miso();                          								// Wait until MISO goes low
 8000b6e:	f7ff ff87 	bl	8000a80 <wait_Miso>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 100);                   // Send register address
 8000b72:	1df9      	adds	r1, r7, #7
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2201      	movs	r2, #1
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <command_strobe1+0x30>)
 8000b7a:	f001 fe6e 	bl	800285a <HAL_SPI_Transmit>
    CS_Deselect();
 8000b7e:	f7ff ff73 	bl	8000a68 <CS_Deselect>
  }
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000084 	.word	0x20000084

08000b90 <readReg>:

// Read register
void readReg(uint16_t regAddr) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
    uint8_t addr;
    uint8_t extended_or_not  = (uint8_t)(regAddr>>8);
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	73bb      	strb	r3, [r7, #14]
    uint8_t extended_addr = (uint8_t)(regAddr & 0x00FF);
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	737b      	strb	r3, [r7, #13]
    // With cc1200 there are 2 types of register accesses and the following code choose the right one.
    if (extended_or_not == 0){
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d119      	bne.n	8000be4 <readReg+0x54>
		addr = regAddr | RADIO_READ_ACCESS;			  						 // Bitwise and to get the right address
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	73fb      	strb	r3, [r7, #15]
		CS_Select();                										 // set the SS pin to LOW
 8000bbc:	f7ff ff48 	bl	8000a50 <CS_Select>
		wait_Miso();                          								 // Wait until MISO goes low
 8000bc0:	f7ff ff5e 	bl	8000a80 <wait_Miso>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&addr, 1, 100);                   // Send register address
 8000bc4:	f107 010f 	add.w	r1, r7, #15
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <readReg+0xa0>)
 8000bce:	f001 fe44 	bl	800285a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, (uint8_t*)&SPI_BUFFER, 1, 100);            	 // Read result
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4917      	ldr	r1, [pc, #92]	; (8000c34 <readReg+0xa4>)
 8000bd8:	4815      	ldr	r0, [pc, #84]	; (8000c30 <readReg+0xa0>)
 8000bda:	f001 ff7a 	bl	8002ad2 <HAL_SPI_Receive>
		CS_Deselect();                    							 		 // set the SS pin to HIGH
 8000bde:	f7ff ff43 	bl	8000a68 <CS_Deselect>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_addr, 1, 100);                   // Send register address
		HAL_SPI_Receive(&hspi3, (uint8_t*)&SPI_BUFFER, 1, 100);            	 // Read result
		CS_Deselect();                    							 		 // set the SS pin to HIGH

    }
}
 8000be2:	e021      	b.n	8000c28 <readReg+0x98>
    else if (extended_or_not == 0x2F){
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	2b2f      	cmp	r3, #47	; 0x2f
 8000be8:	d11e      	bne.n	8000c28 <readReg+0x98>
    	extended_or_not = extended_or_not | RADIO_READ_ACCESS;			  				 // Bitwise and to get the right address
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	73bb      	strb	r3, [r7, #14]
		CS_Select();                										 // set the SS pin to LOW
 8000bf4:	f7ff ff2c 	bl	8000a50 <CS_Select>
		wait_Miso();                          								 // Wait until MISO goes low
 8000bf8:	f7ff ff42 	bl	8000a80 <wait_Miso>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_or_not, 1, 100);		 // Access the extended registers
 8000bfc:	f107 010e 	add.w	r1, r7, #14
 8000c00:	2364      	movs	r3, #100	; 0x64
 8000c02:	2201      	movs	r2, #1
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <readReg+0xa0>)
 8000c06:	f001 fe28 	bl	800285a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_addr, 1, 100);                   // Send register address
 8000c0a:	f107 010d 	add.w	r1, r7, #13
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	2201      	movs	r2, #1
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <readReg+0xa0>)
 8000c14:	f001 fe21 	bl	800285a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, (uint8_t*)&SPI_BUFFER, 1, 100);            	 // Read result
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4905      	ldr	r1, [pc, #20]	; (8000c34 <readReg+0xa4>)
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <readReg+0xa0>)
 8000c20:	f001 ff57 	bl	8002ad2 <HAL_SPI_Receive>
		CS_Deselect();                    							 		 // set the SS pin to HIGH
 8000c24:	f7ff ff20 	bl	8000a68 <CS_Deselect>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000084 	.word	0x20000084
 8000c34:	200000dc 	.word	0x200000dc

08000c38 <send_data_sequence>:

// Send data with sequence numbers
void send_data_sequence(char databuffer[],uint8_t length,uint16_t sequence ){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
 8000c44:	4613      	mov	r3, r2
 8000c46:	803b      	strh	r3, [r7, #0]
	int i;
	uint8_t element;
	uint8_t LSB_seq;
	uint8_t MSB_seq;
	LSB_seq = sequence & 0xFF;
 8000c48:	883b      	ldrh	r3, [r7, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	72bb      	strb	r3, [r7, #10]
	MSB_seq = sequence >> 8;
 8000c4e:	883b      	ldrh	r3, [r7, #0]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	727b      	strb	r3, [r7, #9]
	CS_Select();                		 								// set the CS pin to LOW
 8000c58:	f7ff fefa 	bl	8000a50 <CS_Select>
    wait_Miso();                         								// Wait until MISO goes low
 8000c5c:	f7ff ff10 	bl	8000a80 <wait_Miso>
    uint8_t TXfifo = SINGLE_TXFIFO;
 8000c60:	233f      	movs	r3, #63	; 0x3f
 8000c62:	723b      	strb	r3, [r7, #8]
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000c64:	f107 0108 	add.w	r1, r7, #8
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4824      	ldr	r0, [pc, #144]	; (8000d00 <send_data_sequence+0xc8>)
 8000c6e:	f001 fdf4 	bl	800285a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&length, 1, 100);			   // Send length of data
 8000c72:	1cf9      	adds	r1, r7, #3
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	2201      	movs	r2, #1
 8000c78:	4821      	ldr	r0, [pc, #132]	; (8000d00 <send_data_sequence+0xc8>)
 8000c7a:	f001 fdee 	bl	800285a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000c7e:	f107 0108 	add.w	r1, r7, #8
 8000c82:	2364      	movs	r3, #100	; 0x64
 8000c84:	2201      	movs	r2, #1
 8000c86:	481e      	ldr	r0, [pc, #120]	; (8000d00 <send_data_sequence+0xc8>)
 8000c88:	f001 fde7 	bl	800285a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&MSB_seq, 1, 100);			   // Send MSB of sequence number
 8000c8c:	f107 0109 	add.w	r1, r7, #9
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	2201      	movs	r2, #1
 8000c94:	481a      	ldr	r0, [pc, #104]	; (8000d00 <send_data_sequence+0xc8>)
 8000c96:	f001 fde0 	bl	800285a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000c9a:	f107 0108 	add.w	r1, r7, #8
 8000c9e:	2364      	movs	r3, #100	; 0x64
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4817      	ldr	r0, [pc, #92]	; (8000d00 <send_data_sequence+0xc8>)
 8000ca4:	f001 fdd9 	bl	800285a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&LSB_seq, 1, 100);			   // Send LSB of sequence number
 8000ca8:	f107 010a 	add.w	r1, r7, #10
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <send_data_sequence+0xc8>)
 8000cb2:	f001 fdd2 	bl	800285a <HAL_SPI_Transmit>
    for (i = 0; i < length-2; ++i)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e015      	b.n	8000ce8 <send_data_sequence+0xb0>
        {
          element = databuffer[i];
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	72fb      	strb	r3, [r7, #11]
		  HAL_SPI_Transmit(&hspi3, (uint8_t*)&TXfifo, 1, 100);               // Send the data
 8000cc6:	f107 0108 	add.w	r1, r7, #8
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	2201      	movs	r2, #1
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <send_data_sequence+0xc8>)
 8000cd0:	f001 fdc3 	bl	800285a <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi3, (uint8_t*)&element, 1, 100);                  // Send data
 8000cd4:	f107 010b 	add.w	r1, r7, #11
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <send_data_sequence+0xc8>)
 8000cde:	f001 fdbc 	bl	800285a <HAL_SPI_Transmit>
    for (i = 0; i < length-2; ++i)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	3b02      	subs	r3, #2
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dbe4      	blt.n	8000cbc <send_data_sequence+0x84>
        }
    CS_Deselect();
 8000cf2:	f7ff feb9 	bl	8000a68 <CS_Deselect>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000084 	.word	0x20000084

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int datalen = 4;   // Set length of payload. Note that the first length byte is not inluded in this.
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	60fb      	str	r3, [r7, #12]
						// However the 2 sequence bytes are included. Max value is 63.
	char data[datalen];
 8000d0e:	68fe      	ldr	r6, [r7, #12]
 8000d10:	1e73      	subs	r3, r6, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4632      	mov	r2, r6
 8000d16:	2300      	movs	r3, #0
 8000d18:	4614      	mov	r4, r2
 8000d1a:	461d      	mov	r5, r3
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	00eb      	lsls	r3, r5, #3
 8000d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d2a:	00e2      	lsls	r2, r4, #3
 8000d2c:	4632      	mov	r2, r6
 8000d2e:	2300      	movs	r3, #0
 8000d30:	4610      	mov	r0, r2
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	00cb      	lsls	r3, r1, #3
 8000d3e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d42:	00c2      	lsls	r2, r0, #3
 8000d44:	4633      	mov	r3, r6
 8000d46:	3307      	adds	r3, #7
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d50:	466b      	mov	r3, sp
 8000d52:	3300      	adds	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]

	uint16_t sequence_number = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 fc47 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f8a1 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f000 f99b 	bl	800109c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d66:	f000 f8fb 	bl	8000f60 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d6a:	f000 f92d 	bl	8000fc8 <MX_CAN2_Init>
  MX_SPI3_Init();
 8000d6e:	f000 f95f 	bl	8001030 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	4846      	ldr	r0, [pc, #280]	; (8000e90 <main+0x18c>)
 8000d78:	f001 f890 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PA_EN_GPIO_Port, PA_EN_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4844      	ldr	r0, [pc, #272]	; (8000e94 <main+0x190>)
 8000d82:	f001 f88b 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HGM_GPIO_Port, HGM_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4842      	ldr	r0, [pc, #264]	; (8000e94 <main+0x190>)
 8000d8c:	f001 f886 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LNA_EN_GPIO_Port, LNA_EN_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	483f      	ldr	r0, [pc, #252]	; (8000e94 <main+0x190>)
 8000d96:	f001 f881 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da0:	483c      	ldr	r0, [pc, #240]	; (8000e94 <main+0x190>)
 8000da2:	f001 f87b 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dac:	4839      	ldr	r0, [pc, #228]	; (8000e94 <main+0x190>)
 8000dae:	f001 f875 	bl	8001e9c <HAL_GPIO_WritePin>

  // CC1200_settings
  CC1200_50kbps_settings();
 8000db2:	f7ff fd6f 	bl	8000894 <CC1200_50kbps_settings>


  // Create data array
	int i;
	for (i = 0; i < sizeof(data); ++i)
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e00b      	b.n	8000dd4 <main+0xd0>
	  {
		data[i] = 2 * i;
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	b2d9      	uxtb	r1, r3
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4413      	add	r3, r2
 8000dca:	460a      	mov	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(data); ++i)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	4632      	mov	r2, r6
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8ef      	bhi.n	8000dbc <main+0xb8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (state == 2){
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <main+0x194>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d113      	bne.n	8000e0c <main+0x108>
		  if (prev_state != 2){
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <main+0x198>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d00f      	beq.n	8000e0c <main+0x108>
		  readReg(MARCSTATE);
 8000dec:	f642 7073 	movw	r0, #12147	; 0x2f73
 8000df0:	f7ff fece 	bl	8000b90 <readReg>
		  if (SPI_BUFFER[0] == 22)
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <main+0x19c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b16      	cmp	r3, #22
 8000dfa:	d102      	bne.n	8000e02 <main+0xfe>
		  {
			  command_strobe1(SFTX);
 8000dfc:	203b      	movs	r0, #59	; 0x3b
 8000dfe:	f7ff fead 	bl	8000b5c <command_strobe1>
		  }
		  sequence_number = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	82fb      	strh	r3, [r7, #22]
		  prev_state = 2;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <main+0x198>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]

	  	  }


	  }
	  if (state == 1){
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <main+0x194>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d139      	bne.n	8000e88 <main+0x184>
		  readReg(MARCSTATE);
 8000e14:	f642 7073 	movw	r0, #12147	; 0x2f73
 8000e18:	f7ff feba 	bl	8000b90 <readReg>
		  if (SPI_BUFFER[0] == 22)
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <main+0x19c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b16      	cmp	r3, #22
 8000e22:	d102      	bne.n	8000e2a <main+0x126>
		  		  {
		  			  command_strobe1(SFTX);
 8000e24:	203b      	movs	r0, #59	; 0x3b
 8000e26:	f7ff fe99 	bl	8000b5c <command_strobe1>
		  		  }
		  if (prev_state != 1){
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <main+0x198>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d00a      	beq.n	8000e48 <main+0x144>

		  readReg(MARCSTATE);
 8000e32:	f642 7073 	movw	r0, #12147	; 0x2f73
 8000e36:	f7ff feab 	bl	8000b90 <readReg>


		  readReg(NUM_TXBYTES);
 8000e3a:	f642 70d6 	movw	r0, #12246	; 0x2fd6
 8000e3e:	f7ff fea7 	bl	8000b90 <readReg>

		  prev_state = 1;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <main+0x198>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
		  }

		  readReg(NUM_TXBYTES);
 8000e48:	f642 70d6 	movw	r0, #12246	; 0x2fd6
 8000e4c:	f7ff fea0 	bl	8000b90 <readReg>
		  if (SPI_BUFFER[0] == 0){
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <main+0x19c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d110      	bne.n	8000e7a <main+0x176>

		  send_data_sequence(data, datalen,sequence_number);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	8afa      	ldrh	r2, [r7, #22]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fee9 	bl	8000c38 <send_data_sequence>

		  sequence_number += 1;
 8000e66:	8afb      	ldrh	r3, [r7, #22]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	82fb      	strh	r3, [r7, #22]
		  if (sequence_number > 10000){
 8000e6c:	8afb      	ldrh	r3, [r7, #22]
 8000e6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d901      	bls.n	8000e7a <main+0x176>
			  sequence_number = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	82fb      	strh	r3, [r7, #22]
		  }
		  }

//		  readReg(TXBYTES, STATUS_REGISTER);

		  readReg(NUM_TXBYTES);
 8000e7a:	f642 70d6 	movw	r0, #12246	; 0x2fd6
 8000e7e:	f7ff fe87 	bl	8000b90 <readReg>
		  command_strobe1(STX);
 8000e82:	2035      	movs	r0, #53	; 0x35
 8000e84:	f7ff fe6a 	bl	8000b5c <command_strobe1>
		  //command_strobe1(SFTX); VAR FÖRSIKTIG!!!!!!!



	  }
	  HAL_Delay(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fc21 	bl	80016d0 <HAL_Delay>
	  if (state == 2){
 8000e8e:	e7a5      	b.n	8000ddc <main+0xd8>
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40021000 	.word	0x40021000
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	200000dc 	.word	0x200000dc

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 f9f0 	bl	8003298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <SystemClock_Config+0xb4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <SystemClock_Config+0xb4>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <SystemClock_Config+0xb4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <SystemClock_Config+0xb8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <SystemClock_Config+0xb8>)
 8000eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <SystemClock_Config+0xb8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f00:	2302      	movs	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fff3 	bl	8001f00 <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f20:	f000 f9d4 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f24:	230f      	movs	r3, #15
 8000f26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fa56 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f4a:	f000 f9bf 	bl	80012cc <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <MX_CAN1_Init+0x64>)
 8000f68:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000fae:	f000 fbb3 	bl	8001718 <HAL_CAN_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000fb8:	f000 f988 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000034 	.word	0x20000034
 8000fc4:	40006400 	.word	0x40006400

08000fc8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <MX_CAN2_Init+0x64>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_CAN2_Init+0x60>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_CAN2_Init+0x60>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_CAN2_Init+0x60>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_CAN2_Init+0x60>)
 8001004:	2200      	movs	r2, #0
 8001006:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_CAN2_Init+0x60>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_CAN2_Init+0x60>)
 8001010:	2200      	movs	r2, #0
 8001012:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_CAN2_Init+0x60>)
 8001016:	f000 fb7f 	bl	8001718 <HAL_CAN_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001020:	f000 f954 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000005c 	.word	0x2000005c
 800102c:	40006800 	.word	0x40006800

08001030 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_SPI3_Init+0x64>)
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_SPI3_Init+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_SPI3_Init+0x64>)
 800103c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_SPI3_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_SPI3_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_SPI3_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SPI3_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_SPI3_Init+0x64>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SPI3_Init+0x64>)
 8001064:	2218      	movs	r2, #24
 8001066:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_SPI3_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SPI3_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_SPI3_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_SPI3_Init+0x64>)
 800107c:	220a      	movs	r2, #10
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_SPI3_Init+0x64>)
 8001082:	f001 fb61 	bl	8002748 <HAL_SPI_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800108c:	f000 f91e 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000084 	.word	0x20000084
 8001098:	40003c00 	.word	0x40003c00

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <MX_GPIO_Init+0x154>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <MX_GPIO_Init+0x154>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <MX_GPIO_Init+0x154>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <MX_GPIO_Init+0x154>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <MX_GPIO_Init+0x154>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <MX_GPIO_Init+0x154>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PA_EN_Pin|HGM_Pin, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2150      	movs	r1, #80	; 0x50
 8001142:	482c      	ldr	r0, [pc, #176]	; (80011f4 <MX_GPIO_Init+0x158>)
 8001144:	f000 feaa 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LNA_EN_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f24c 0120 	movw	r1, #49184	; 0xc020
 800114e:	4829      	ldr	r0, [pc, #164]	; (80011f4 <MX_GPIO_Init+0x158>)
 8001150:	f000 fea4 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HIGH_GPIO_Port, HIGH_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2140      	movs	r1, #64	; 0x40
 8001158:	4827      	ldr	r0, [pc, #156]	; (80011f8 <MX_GPIO_Init+0x15c>)
 800115a:	f000 fe9f 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4826      	ldr	r0, [pc, #152]	; (80011fc <MX_GPIO_Init+0x160>)
 8001164:	f000 fe9a 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA_EN_Pin LNA_EN_Pin HGM_Pin LED_GREEN_Pin
                           LED_BLUE_Pin */
  GPIO_InitStruct.Pin = PA_EN_Pin|LNA_EN_Pin|HGM_Pin|LED_GREEN_Pin
 8001168:	f24c 0370 	movw	r3, #49264	; 0xc070
 800116c:	617b      	str	r3, [r7, #20]
                          |LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	481c      	ldr	r0, [pc, #112]	; (80011f4 <MX_GPIO_Init+0x158>)
 8001182:	f000 fcd7 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : HIGH_Pin */
  GPIO_InitStruct.Pin = HIGH_Pin;
 8001186:	2340      	movs	r3, #64	; 0x40
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HIGH_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4816      	ldr	r0, [pc, #88]	; (80011f8 <MX_GPIO_Init+0x15c>)
 800119e:	f000 fcc9 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4810      	ldr	r0, [pc, #64]	; (80011f8 <MX_GPIO_Init+0x15c>)
 80011b8:	f000 fcbc 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80011bc:	2340      	movs	r3, #64	; 0x40
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <MX_GPIO_Init+0x160>)
 80011d4:	f000 fcae 	bl	8001b34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2017      	movs	r0, #23
 80011de:	f000 fc72 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e2:	2017      	movs	r0, #23
 80011e4:	f000 fc8b 	bl	8001afe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020c00 	.word	0x40020c00

08001200 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == Button_Pin) {
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2b80      	cmp	r3, #128	; 0x80
 800120e:	d153      	bne.n	80012b8 <HAL_GPIO_EXTI_Callback+0xb8>


			if (state == 1){
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d13b      	bne.n	8001290 <HAL_GPIO_EXTI_Callback+0x90>

				if (data_mode == DATA_MODE_50kbps){
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d111      	bne.n	8001244 <HAL_GPIO_EXTI_Callback+0x44>
					data_mode = DATA_MODE_250kbps;
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001222:	2202      	movs	r2, #2
 8001224:	601a      	str	r2, [r3, #0]
					CC1200_250kbps_settings();
 8001226:	f7ff f94d 	bl	80004c4 <CC1200_250kbps_settings>
					HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001230:	4825      	ldr	r0, [pc, #148]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001232:	f000 fe33 	bl	8001e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123c:	4822      	ldr	r0, [pc, #136]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800123e:	f000 fe2d 	bl	8001e9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);


			}
	}
}
 8001242:	e039      	b.n	80012b8 <HAL_GPIO_EXTI_Callback+0xb8>
				else if (data_mode == DATA_MODE_250kbps){
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d111      	bne.n	8001270 <HAL_GPIO_EXTI_Callback+0x70>
					data_mode = DATA_MODE_500kbps;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800124e:	2203      	movs	r2, #3
 8001250:	601a      	str	r2, [r3, #0]
					CC1200_500kbps_settings();
 8001252:	f7ff fa27 	bl	80006a4 <CC1200_500kbps_settings>
					HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800125e:	f000 fe1d 	bl	8001e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001268:	4817      	ldr	r0, [pc, #92]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800126a:	f000 fe17 	bl	8001e9c <HAL_GPIO_WritePin>
}
 800126e:	e023      	b.n	80012b8 <HAL_GPIO_EXTI_Callback+0xb8>
					state = 2;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001272:	2202      	movs	r2, #2
 8001274:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127c:	4812      	ldr	r0, [pc, #72]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800127e:	f000 fe0d 	bl	8001e9c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001288:	480f      	ldr	r0, [pc, #60]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800128a:	f000 fe07 	bl	8001e9c <HAL_GPIO_WritePin>
}
 800128e:	e013      	b.n	80012b8 <HAL_GPIO_EXTI_Callback+0xb8>
				state = 1;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
				data_mode = DATA_MODE_50kbps;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
				CC1200_50kbps_settings();
 800129c:	f7ff fafa 	bl	8000894 <CC1200_50kbps_settings>
				HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80012a8:	f000 fdf8 	bl	8001e9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80012b4:	f000 fdf2 	bl	8001e9c <HAL_GPIO_WritePin>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	40021000 	.word	0x40021000

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_MspInit+0x4c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <HAL_MspInit+0x4c>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_MspInit+0x4c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_MspInit+0x4c>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_CAN_MspInit+0x12c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d136      	bne.n	80013bc <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800134e:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_CAN_MspInit+0x130>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a41      	ldr	r2, [pc, #260]	; (800145c <HAL_CAN_MspInit+0x130>)
 8001356:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001358:	4b40      	ldr	r3, [pc, #256]	; (800145c <HAL_CAN_MspInit+0x130>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10d      	bne.n	800137c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <HAL_CAN_MspInit+0x134>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <HAL_CAN_MspInit+0x134>)
 800136a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <HAL_CAN_MspInit+0x134>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_CAN_MspInit+0x134>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_CAN_MspInit+0x134>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_CAN_MspInit+0x134>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001398:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013aa:	2309      	movs	r3, #9
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	482b      	ldr	r0, [pc, #172]	; (8001464 <HAL_CAN_MspInit+0x138>)
 80013b6:	f000 fbbd 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80013ba:	e048      	b.n	800144e <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a29      	ldr	r2, [pc, #164]	; (8001468 <HAL_CAN_MspInit+0x13c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d143      	bne.n	800144e <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_CAN_MspInit+0x134>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_CAN_MspInit+0x134>)
 80013d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_CAN_MspInit+0x134>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_CAN_MspInit+0x130>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <HAL_CAN_MspInit+0x130>)
 80013ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_CAN_MspInit+0x130>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10d      	bne.n	8001410 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_CAN_MspInit+0x134>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_CAN_MspInit+0x134>)
 80013fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_CAN_MspInit+0x134>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_CAN_MspInit+0x134>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_CAN_MspInit+0x134>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_CAN_MspInit+0x134>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800142c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800143e:	2309      	movs	r3, #9
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <HAL_CAN_MspInit+0x140>)
 800144a:	f000 fb73 	bl	8001b34 <HAL_GPIO_Init>
}
 800144e:	bf00      	nop
 8001450:	3730      	adds	r7, #48	; 0x30
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40006400 	.word	0x40006400
 800145c:	200000e4 	.word	0x200000e4
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000
 8001468:	40006800 	.word	0x40006800
 800146c:	40020400 	.word	0x40020400

08001470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_SPI_MspInit+0x84>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12c      	bne.n	80014ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 800149c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014dc:	2306      	movs	r3, #6
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_SPI_MspInit+0x8c>)
 80014e8:	f000 fb24 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40003c00 	.word	0x40003c00
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020800 	.word	0x40020800

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001554:	f000 f89c 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001560:	2080      	movs	r0, #128	; 0x80
 8001562:	f000 fcb5 	bl	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <SystemInit+0x28>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <SystemInit+0x28>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SystemInit+0x28>)
 8001582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001586:	609a      	str	r2, [r3, #8]
#endif
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800159c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800159e:	e003      	b.n	80015a8 <LoopCopyDataInit>

080015a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015a6:	3104      	adds	r1, #4

080015a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015b0:	d3f6      	bcc.n	80015a0 <CopyDataInit>
  ldr  r2, =_sbss
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015b4:	e002      	b.n	80015bc <LoopFillZerobss>

080015b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015b8:	f842 3b04 	str.w	r3, [r2], #4

080015bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015c0:	d3f9      	bcc.n	80015b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015c2:	f7ff ffd3 	bl	800156c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c6:	f001 fe6f 	bl	80032a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7ff fb9b 	bl	8000d04 <main>
  bx  lr    
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015d4:	08003328 	.word	0x08003328
  ldr  r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015dc:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80015e0:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80015e4:	200000ec 	.word	0x200000ec

080015e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_Init+0x40>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_Init+0x40>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_Init+0x40>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 fa4b 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fe5c 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fa63 	bl	8001b1a <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f000 fa2b 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000000c 	.word	0x2000000c
 8001688:	20000014 	.word	0x20000014
 800168c:	20000010 	.word	0x20000010

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000014 	.word	0x20000014
 80016b4:	200000e8 	.word	0x200000e8

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200000e8 	.word	0x200000e8

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ffee 	bl	80016b8 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f6:	bf00      	nop
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000014 	.word	0x20000014

08001718 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0ed      	b.n	8001906 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fdf8 	bl	800132c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800174c:	f7ff ffb4 	bl	80016b8 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001752:	e012      	b.n	800177a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001754:	f7ff ffb0 	bl	80016b8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b0a      	cmp	r3, #10
 8001760:	d90b      	bls.n	800177a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2205      	movs	r2, #5
 8001772:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0c5      	b.n	8001906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0e5      	beq.n	8001754 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0202 	bic.w	r2, r2, #2
 8001796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001798:	f7ff ff8e 	bl	80016b8 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800179e:	e012      	b.n	80017c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a0:	f7ff ff8a 	bl	80016b8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d90b      	bls.n	80017c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2205      	movs	r2, #5
 80017be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e09f      	b.n	8001906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e5      	bne.n	80017a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e1b      	ldrb	r3, [r3, #24]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d108      	bne.n	80017ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e007      	b.n	80017fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7e5b      	ldrb	r3, [r3, #25]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d108      	bne.n	8001818 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e007      	b.n	8001828 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001826:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e9b      	ldrb	r3, [r3, #26]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d108      	bne.n	8001842 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e007      	b.n	8001852 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0220 	bic.w	r2, r2, #32
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7edb      	ldrb	r3, [r3, #27]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0210 	bic.w	r2, r2, #16
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e007      	b.n	800187c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0210 	orr.w	r2, r2, #16
 800187a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7f1b      	ldrb	r3, [r3, #28]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d108      	bne.n	8001896 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0208 	orr.w	r2, r2, #8
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e007      	b.n	80018a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0208 	bic.w	r2, r2, #8
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7f5b      	ldrb	r3, [r3, #29]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0204 	orr.w	r2, r2, #4
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e007      	b.n	80018d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0204 	bic.w	r2, r2, #4
 80018ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	ea42 0103 	orr.w	r1, r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff29 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff3e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff31 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e16b      	b.n	8001e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 815a 	bne.w	8001e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80b4 	beq.w	8001e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a5f      	ldr	r2, [pc, #380]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a5b      	ldr	r2, [pc, #364]	; (8001e44 <HAL_GPIO_Init+0x310>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_GPIO_Init+0x314>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02b      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <HAL_GPIO_Init+0x318>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d025      	beq.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a50      	ldr	r2, [pc, #320]	; (8001e50 <HAL_GPIO_Init+0x31c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <HAL_GPIO_Init+0x21e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_GPIO_Init+0x320>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4e      	ldr	r2, [pc, #312]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x216>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4d      	ldr	r2, [pc, #308]	; (8001e5c <HAL_GPIO_Init+0x328>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_GPIO_Init+0x32c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x20e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4b      	ldr	r2, [pc, #300]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x20a>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e00e      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d3e:	2308      	movs	r3, #8
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x310>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a32      	ldr	r2, [pc, #200]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df2:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f67f ae90 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40021c00 	.word	0x40021c00
 8001e68:	40013c00 	.word	0x40013c00

08001e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e001      	b.n	8001e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f986 	bl	8001200 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e267      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d075      	beq.n	800200a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05b      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d157      	bne.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e242      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x74>
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x98>
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6f      	ldr	r2, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6c      	ldr	r2, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f98:	4b69      	ldr	r3, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a68      	ldr	r2, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a65      	ldr	r2, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fb7e 	bl	80016b8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fb7a 	bl	80016b8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e207      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fb6a 	bl	80016b8 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fb66 	bl	80016b8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1f3      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b51      	ldr	r3, [pc, #324]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xe8>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1c7      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x244>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fb1f 	bl	80016b8 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fb1b 	bl	80016b8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1a8      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4925      	ldr	r1, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_OscConfig+0x244>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fafe 	bl	80016b8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fafa 	bl	80016b8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e187      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d036      	beq.n	8002158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_RCC_OscConfig+0x248>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff fade 	bl	80016b8 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fada 	bl	80016b8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e167      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x200>
 800211e:	e01b      	b.n	8002158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_OscConfig+0x248>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff fac7 	bl	80016b8 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e00e      	b.n	800214c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff fac3 	bl	80016b8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d907      	bls.n	800214c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e150      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ea      	bne.n	800212e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8097 	beq.w	8002294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b7d      	ldr	r3, [pc, #500]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a7c      	ldr	r2, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b7a      	ldr	r3, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b77      	ldr	r3, [pc, #476]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b74      	ldr	r3, [pc, #464]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a73      	ldr	r2, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff fa83 	bl	80016b8 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7ff fa7f 	bl	80016b8 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e10c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x2ea>
 80021dc:	4b64      	ldr	r3, [pc, #400]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	4a63      	ldr	r2, [pc, #396]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x30c>
 80021f2:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a5e      	ldr	r2, [pc, #376]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	4b5c      	ldr	r3, [pc, #368]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 800220c:	4b58      	ldr	r3, [pc, #352]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a57      	ldr	r2, [pc, #348]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	4b55      	ldr	r3, [pc, #340]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a54      	ldr	r2, [pc, #336]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff fa44 	bl	80016b8 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff fa40 	bl	80016b8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0cb      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ee      	beq.n	8002234 <HAL_RCC_OscConfig+0x334>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fa2e 	bl	80016b8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fa2a 	bl	80016b8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0b5      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ee      	bne.n	8002260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a38      	ldr	r2, [pc, #224]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a1 	beq.w	80023e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d05c      	beq.n	8002364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d141      	bne.n	8002336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff f9fe 	bl	80016b8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff f9fa 	bl	80016b8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e087      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	491b      	ldr	r1, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff f9d3 	bl	80016b8 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff f9cf 	bl	80016b8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e05c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x416>
 8002334:	e054      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff f9bc 	bl	80016b8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff f9b8 	bl	80016b8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e045      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x444>
 8002362:	e03d      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e038      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000
 8002378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x4ec>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d028      	beq.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d121      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0cc      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d90c      	bls.n	800242c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d044      	beq.n	8002510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d119      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e067      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4934      	ldr	r1, [pc, #208]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7ff f8ea 	bl	80016b8 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7ff f8e6 	bl	80016b8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e04f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 020c 	and.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1eb      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d20c      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4602      	mov	r2, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	490a      	ldr	r1, [pc, #40]	; (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	5ccb      	ldrb	r3, [r1, r3]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f84a 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08003308 	.word	0x08003308
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	20000010 	.word	0x20000010

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b090      	sub	sp, #64	; 0x40
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	2300      	movs	r3, #0
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025cc:	2300      	movs	r3, #0
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d00d      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x40>
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	f200 80a1 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x16c>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ee:	e09b      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_GetSysClockFreq+0x184>)
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025f4:	e09b      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f6:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025fa:	e098      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002606:	4b4d      	ldr	r3, [pc, #308]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d028      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	2200      	movs	r2, #0
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	627a      	str	r2, [r7, #36]	; 0x24
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002624:	2100      	movs	r1, #0
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 8002628:	fb03 f201 	mul.w	r2, r3, r1
 800262c:	2300      	movs	r3, #0
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	4413      	add	r3, r2
 8002634:	4a43      	ldr	r2, [pc, #268]	; (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 8002636:	fba0 1202 	umull	r1, r2, r0, r2
 800263a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800263c:	460a      	mov	r2, r1
 800263e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002642:	4413      	add	r3, r2
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	2200      	movs	r2, #0
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	61fa      	str	r2, [r7, #28]
 800264e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002652:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002656:	f7fd fdb7 	bl	80001c8 <__aeabi_uldivmod>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4613      	mov	r3, r2
 8002660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002662:	e053      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	2200      	movs	r2, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	617a      	str	r2, [r7, #20]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002676:	f04f 0b00 	mov.w	fp, #0
 800267a:	4652      	mov	r2, sl
 800267c:	465b      	mov	r3, fp
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	0159      	lsls	r1, r3, #5
 8002688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268c:	0150      	lsls	r0, r2, #5
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	ebb2 080a 	subs.w	r8, r2, sl
 8002696:	eb63 090b 	sbc.w	r9, r3, fp
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026ae:	ebb2 0408 	subs.w	r4, r2, r8
 80026b2:	eb63 0509 	sbc.w	r5, r3, r9
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	00eb      	lsls	r3, r5, #3
 80026c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c4:	00e2      	lsls	r2, r4, #3
 80026c6:	4614      	mov	r4, r2
 80026c8:	461d      	mov	r5, r3
 80026ca:	eb14 030a 	adds.w	r3, r4, sl
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	eb45 030b 	adc.w	r3, r5, fp
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e2:	4629      	mov	r1, r5
 80026e4:	028b      	lsls	r3, r1, #10
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ec:	4621      	mov	r1, r4
 80026ee:	028a      	lsls	r2, r1, #10
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	2200      	movs	r2, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	60fa      	str	r2, [r7, #12]
 80026fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002700:	f7fd fd62 	bl	80001c8 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800271c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetSysClockFreq+0x184>)
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002730:	4618      	mov	r0, r3
 8002732:	3740      	adds	r7, #64	; 0x40
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	017d7840 	.word	0x017d7840

08002748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07b      	b.n	8002852 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	2b00      	cmp	r3, #0
 8002760:	d108      	bne.n	8002774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800276a:	d009      	beq.n	8002780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
 8002772:	e005      	b.n	8002780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fe68 	bl	8001470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	ea42 0103 	orr.w	r1, r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f003 0104 	and.w	r1, r3, #4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	f003 0210 	and.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002840:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b088      	sub	sp, #32
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_SPI_Transmit+0x22>
 8002878:	2302      	movs	r3, #2
 800287a:	e126      	b.n	8002aca <HAL_SPI_Transmit+0x270>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002884:	f7fe ff18 	bl	80016b8 <HAL_GetTick>
 8002888:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d002      	beq.n	80028a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800289e:	e10b      	b.n	8002ab8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_SPI_Transmit+0x52>
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028b0:	e102      	b.n	8002ab8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2203      	movs	r2, #3
 80028b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f8:	d10f      	bne.n	800291a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002908:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002918:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d007      	beq.n	8002938 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002940:	d14b      	bne.n	80029da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_Transmit+0xf6>
 800294a:	8afb      	ldrh	r3, [r7, #22]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d13e      	bne.n	80029ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	1c9a      	adds	r2, r3, #2
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002974:	e02b      	b.n	80029ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d112      	bne.n	80029aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	881a      	ldrh	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	1c9a      	adds	r2, r3, #2
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80029a8:	e011      	b.n	80029ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029aa:	f7fe fe85 	bl	80016b8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d803      	bhi.n	80029c2 <HAL_SPI_Transmit+0x168>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d102      	bne.n	80029c8 <HAL_SPI_Transmit+0x16e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029cc:	e074      	b.n	8002ab8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ce      	bne.n	8002976 <HAL_SPI_Transmit+0x11c>
 80029d8:	e04c      	b.n	8002a74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_SPI_Transmit+0x18e>
 80029e2:	8afb      	ldrh	r3, [r7, #22]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d140      	bne.n	8002a6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	7812      	ldrb	r2, [r2, #0]
 80029f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a0e:	e02c      	b.n	8002a6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d113      	bne.n	8002a46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	7812      	ldrb	r2, [r2, #0]
 8002a2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a44:	e011      	b.n	8002a6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a46:	f7fe fe37 	bl	80016b8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d803      	bhi.n	8002a5e <HAL_SPI_Transmit+0x204>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d102      	bne.n	8002a64 <HAL_SPI_Transmit+0x20a>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a68:	e026      	b.n	8002ab8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1cd      	bne.n	8002a10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fbcb 	bl	8003214 <SPI_EndRxTxTransaction>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e000      	b.n	8002ab8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ab6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b088      	sub	sp, #32
 8002ad6:	af02      	add	r7, sp, #8
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aee:	d112      	bne.n	8002b16 <HAL_SPI_Receive+0x44>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10e      	bne.n	8002b16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2204      	movs	r2, #4
 8002afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f8f1 	bl	8002cf4 <HAL_SPI_TransmitReceive>
 8002b12:	4603      	mov	r3, r0
 8002b14:	e0ea      	b.n	8002cec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_SPI_Receive+0x52>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e0e3      	b.n	8002cec <HAL_SPI_Receive+0x21a>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b2c:	f7fe fdc4 	bl	80016b8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d002      	beq.n	8002b44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b42:	e0ca      	b.n	8002cda <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_SPI_Receive+0x7e>
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b54:	e0c1      	b.n	8002cda <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9c:	d10f      	bne.n	8002bbe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d007      	beq.n	8002bdc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d162      	bne.n	8002caa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002be4:	e02e      	b.n	8002c44 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d115      	bne.n	8002c20 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f103 020c 	add.w	r2, r3, #12
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c1e:	e011      	b.n	8002c44 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c20:	f7fe fd4a 	bl	80016b8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d803      	bhi.n	8002c38 <HAL_SPI_Receive+0x166>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d102      	bne.n	8002c3e <HAL_SPI_Receive+0x16c>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c42:	e04a      	b.n	8002cda <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1cb      	bne.n	8002be6 <HAL_SPI_Receive+0x114>
 8002c4e:	e031      	b.n	8002cb4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d113      	bne.n	8002c86 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	1c9a      	adds	r2, r3, #2
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c84:	e011      	b.n	8002caa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c86:	f7fe fd17 	bl	80016b8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d803      	bhi.n	8002c9e <HAL_SPI_Receive+0x1cc>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d102      	bne.n	8002ca4 <HAL_SPI_Receive+0x1d2>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ca8:	e017      	b.n	8002cda <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1cd      	bne.n	8002c50 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	6839      	ldr	r1, [r7, #0]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fa45 	bl	8003148 <SPI_EndRxTransaction>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
 8002cd6:	e000      	b.n	8002cda <HAL_SPI_Receive+0x208>
  }

error :
 8002cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08c      	sub	sp, #48	; 0x30
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d02:	2301      	movs	r3, #1
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x26>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e18a      	b.n	8003030 <HAL_SPI_TransmitReceive+0x33c>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d22:	f7fe fcc9 	bl	80016b8 <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d00f      	beq.n	8002d64 <HAL_SPI_TransmitReceive+0x70>
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4a:	d107      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d103      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x68>
 8002d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d003      	beq.n	8002d64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d62:	e15b      	b.n	800301c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_SPI_TransmitReceive+0x82>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_SPI_TransmitReceive+0x82>
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d7c:	e14e      	b.n	800301c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d003      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2205      	movs	r2, #5
 8002d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	887a      	ldrh	r2, [r7, #2]
 8002da2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	887a      	ldrh	r2, [r7, #2]
 8002dba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d007      	beq.n	8002de6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dee:	d178      	bne.n	8002ee2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_TransmitReceive+0x10a>
 8002df8:	8b7b      	ldrh	r3, [r7, #26]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d166      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e22:	e053      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d11b      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x176>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d016      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x176>
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d113      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	881a      	ldrh	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d119      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x1b8>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d014      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	1c9a      	adds	r2, r3, #2
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eac:	f7fe fc04 	bl	80016b8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d807      	bhi.n	8002ecc <HAL_SPI_TransmitReceive+0x1d8>
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d003      	beq.n	8002ecc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002eca:	e0a7      	b.n	800301c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1a6      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x130>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1a1      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x130>
 8002ee0:	e07c      	b.n	8002fdc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_SPI_TransmitReceive+0x1fc>
 8002eea:	8b7b      	ldrh	r3, [r7, #26]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d16b      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	7812      	ldrb	r2, [r2, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f16:	e057      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d11c      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x26c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <HAL_SPI_TransmitReceive+0x26c>
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d114      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	7812      	ldrb	r2, [r2, #0]
 8002f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d119      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x2ae>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d014      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fa2:	f7fe fb89 	bl	80016b8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d803      	bhi.n	8002fba <HAL_SPI_TransmitReceive+0x2c6>
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d102      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x2cc>
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fc6:	e029      	b.n	800301c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1a2      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x224>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d19d      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f917 	bl	8003214 <SPI_EndRxTxTransaction>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ff8:	e010      	b.n	800301c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	e000      	b.n	800301c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800301a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800302c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003030:	4618      	mov	r0, r3
 8003032:	3730      	adds	r7, #48	; 0x30
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003048:	f7fe fb36 	bl	80016b8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	4413      	add	r3, r2
 8003056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003058:	f7fe fb2e 	bl	80016b8 <HAL_GetTick>
 800305c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800305e:	4b39      	ldr	r3, [pc, #228]	; (8003144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	0d1b      	lsrs	r3, r3, #20
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800306e:	e054      	b.n	800311a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d050      	beq.n	800311a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003078:	f7fe fb1e 	bl	80016b8 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	429a      	cmp	r2, r3
 8003086:	d902      	bls.n	800308e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d13d      	bne.n	800310a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800309c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a6:	d111      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b0:	d004      	beq.n	80030bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d107      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d4:	d10f      	bne.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e017      	b.n	800313a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3b01      	subs	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4013      	ands	r3, r2
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	bf0c      	ite	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	2300      	movne	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	429a      	cmp	r2, r3
 8003136:	d19b      	bne.n	8003070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2000000c 	.word	0x2000000c

08003148 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800315c:	d111      	bne.n	8003182 <SPI_EndRxTransaction+0x3a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003166:	d004      	beq.n	8003172 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003170:	d107      	bne.n	8003182 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318a:	d12a      	bne.n	80031e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003194:	d012      	beq.n	80031bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff ff49 	bl	8003038 <SPI_WaitFlagStateUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d02d      	beq.n	8003208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e026      	b.n	800320a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2200      	movs	r2, #0
 80031c4:	2101      	movs	r1, #1
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff ff36 	bl	8003038 <SPI_WaitFlagStateUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01a      	beq.n	8003208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e013      	b.n	800320a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2101      	movs	r1, #1
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff ff23 	bl	8003038 <SPI_WaitFlagStateUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e000      	b.n	800320a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003220:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <SPI_EndRxTxTransaction+0x7c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <SPI_EndRxTxTransaction+0x80>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0d5b      	lsrs	r3, r3, #21
 800322c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323e:	d112      	bne.n	8003266 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff fef4 	bl	8003038 <SPI_WaitFlagStateUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d016      	beq.n	8003284 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e00f      	b.n	8003286 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3b01      	subs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d0f2      	beq.n	8003266 <SPI_EndRxTxTransaction+0x52>
 8003280:	e000      	b.n	8003284 <SPI_EndRxTxTransaction+0x70>
        break;
 8003282:	bf00      	nop
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000000c 	.word	0x2000000c
 8003294:	165e9f81 	.word	0x165e9f81

08003298 <memset>:
 8003298:	4402      	add	r2, r0
 800329a:	4603      	mov	r3, r0
 800329c:	4293      	cmp	r3, r2
 800329e:	d100      	bne.n	80032a2 <memset+0xa>
 80032a0:	4770      	bx	lr
 80032a2:	f803 1b01 	strb.w	r1, [r3], #1
 80032a6:	e7f9      	b.n	800329c <memset+0x4>

080032a8 <__libc_init_array>:
 80032a8:	b570      	push	{r4, r5, r6, lr}
 80032aa:	4d0d      	ldr	r5, [pc, #52]	; (80032e0 <__libc_init_array+0x38>)
 80032ac:	4c0d      	ldr	r4, [pc, #52]	; (80032e4 <__libc_init_array+0x3c>)
 80032ae:	1b64      	subs	r4, r4, r5
 80032b0:	10a4      	asrs	r4, r4, #2
 80032b2:	2600      	movs	r6, #0
 80032b4:	42a6      	cmp	r6, r4
 80032b6:	d109      	bne.n	80032cc <__libc_init_array+0x24>
 80032b8:	4d0b      	ldr	r5, [pc, #44]	; (80032e8 <__libc_init_array+0x40>)
 80032ba:	4c0c      	ldr	r4, [pc, #48]	; (80032ec <__libc_init_array+0x44>)
 80032bc:	f000 f818 	bl	80032f0 <_init>
 80032c0:	1b64      	subs	r4, r4, r5
 80032c2:	10a4      	asrs	r4, r4, #2
 80032c4:	2600      	movs	r6, #0
 80032c6:	42a6      	cmp	r6, r4
 80032c8:	d105      	bne.n	80032d6 <__libc_init_array+0x2e>
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d0:	4798      	blx	r3
 80032d2:	3601      	adds	r6, #1
 80032d4:	e7ee      	b.n	80032b4 <__libc_init_array+0xc>
 80032d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032da:	4798      	blx	r3
 80032dc:	3601      	adds	r6, #1
 80032de:	e7f2      	b.n	80032c6 <__libc_init_array+0x1e>
 80032e0:	08003320 	.word	0x08003320
 80032e4:	08003320 	.word	0x08003320
 80032e8:	08003320 	.word	0x08003320
 80032ec:	08003324 	.word	0x08003324

080032f0 <_init>:
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	bf00      	nop
 80032f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f6:	bc08      	pop	{r3}
 80032f8:	469e      	mov	lr, r3
 80032fa:	4770      	bx	lr

080032fc <_fini>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	bf00      	nop
 8003300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003302:	bc08      	pop	{r3}
 8003304:	469e      	mov	lr, r3
 8003306:	4770      	bx	lr
